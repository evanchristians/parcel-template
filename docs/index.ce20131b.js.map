{"mappings":"AAAA,MCUMA,EAAW,IAAIC,sBAVHC,IACdA,EAAQC,SAASC,IACTA,EAAMC,eACND,EAAME,OAAOC,UAAUC,IAAG,mBAE1BJ,EAAME,OAAOC,UAAUE,OAAM,wBAKS,CAC9CC,KAAMC,SAASC,cAAa,QAC5BC,UAAW,IAGTC,EAAcH,SAASI,iBAAgB,iBCfvCC,EAAYL,SAASI,iBAAgB,oBACrCE,EAAQN,SAASI,iBAAgB,eDiBnCD,EAAYX,SAASe,GAAelB,EAASmB,QAAQD,KCdrDF,EAAUb,SAASiB,IACfA,EAASC,iBAAgB,SAAWC,IAChCA,EAAMC,iBAENP,EAAUb,SAASqB,GACfA,EAASjB,UAAUE,OAAM,YAG7BW,EAASb,UAAUC,IAAG,UAEtBS,EAAMd,SAASsB,GAASA,EAAKlB,UAAUE,OAAM,YAE7CE,SACKe,eAAeN,EAASO,QAAQrB,QAChCC,UAAUC,IAAG,gBCP9BG,SAASe,eAAc,gBAAiBL,iBAAgB,UHwDtBC,IAC9BA,EAAMC,iBACN,MAAMK,EAAW,IAAIC,SAASlB,SAASe,eAAc,iBAC/CI,EAAYC,OAAOC,YAAYJ,IAEhCK,QAAGA,EAAOC,OAAEA,GAxEP,CAAIJ,IACd,IAAII,EAAM,GA6CV,OA3C6B,GAAzBJ,EAAUK,KAAKC,QACfF,EAAOG,KAAI,CACPC,MAAK,OACLC,QAAO,2BAIe,GAA1BT,EAAUU,MAAMJ,OAChBF,EAAOG,KAAI,CACPC,MAAK,QACLC,QAAO,2BAGVT,EAAUU,MACNC,QAAO,YAAA,IACPA,QAAO,IAAI,IACXC,MAAK,gBAEVR,EAAOG,KAAI,CACPC,MAAK,QACLC,QAAO,iCAIiB,GAA5BT,EAAUS,QAAQH,QAClBF,EAAOG,KAAI,CACPC,MAAK,UACLC,QAAO,2BAIe,GAA1BT,EAAUa,MAAMP,OAChBF,EAAOG,KAAI,CACPC,MAAK,QACLC,QAAO,2BAEHT,EAAUa,MAAMD,MAAK,+BAC7BR,EAAOG,KAAI,CACPC,MAAK,QACLC,QAAO,kCAIXL,EAAOE,OAAS,EAAC,QAEbF,EACAD,SAAS,IAIbA,SAAS,IAmBeW,CAASd,GAWrC,GA1Ba,CAAIA,QACZ,MAAOe,EAAKC,KAASf,OAAO7B,QAAQ4B,GAAY,CACjD,MAAMiB,EAAapC,SAASe,eAAc,GAAImB,WAC1CE,IAAYA,EAAWC,UAAS,IAGxCrC,SAASe,eAAc,gBAAiBsB,UAAS,IAWjDC,CAAYnB,GAERI,GACAA,EAAO/B,SAAS+C,IACOvC,SAASe,eAAc,GAAIwB,EAAMZ,eACzCU,UAAYE,EAAMX,WAIjCN,EAAS,CACT,MAAMkB,EAAexC,SAASe,eAAc,8BAI5CyB,EAAaC,UAAW,EAExB,MAAKnB,QAAGoB,GAAYC,WAEhBD,IACAF,EAAa5C,UAAUC,IAAG,WAC1B2C,EAAaH,UAAS,QACtBrC,SAASe,eAAc,gBAAiBsB,UAAS,8DAIrDrC,SAASe,eAAc,gBAAiBsB,UAAS","sources":["src/utils/submitContactForm.js","src/utils/useIntersectionObserver.js","src/utils/usePrimitiveSPRouter.js","src/index.js"],"sourcesContent":["const validate = (formProps) => {\n    let errors = [];\n\n    if (formProps.name.length == 0) {\n        errors.push({\n            field: \"name\",\n            message: \"This field is required\",\n        });\n    }\n\n    if (formProps.phone.length == 0) {\n        errors.push({\n            field: \"phone\",\n            message: \"This field is required\",\n        });\n    } else if (\n        !formProps.phone\n            .replace(/[^\\w\\s]/gi, \"\")\n            .replace(\" \", \"\")\n            .match(/^[0-9]{10}$/)\n    ) {\n        errors.push({\n            field: \"phone\",\n            message: \"This phone number is invalid\",\n        });\n    }\n\n    if (formProps.message.length == 0) {\n        errors.push({\n            field: \"message\",\n            message: \"This field is required\",\n        });\n    }\n\n    if (formProps.email.length == 0) {\n        errors.push({\n            field: \"email\",\n            message: \"This field is required\",\n        });\n    } else if (!formProps.email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n        errors.push({\n            field: \"email\",\n            message: \"This email address is invalid\",\n        });\n    }\n\n    if (errors.length > 0)\n        return {\n            errors,\n            success: false,\n        };\n\n    return {\n        success: true,\n    };\n};\n\nconst clearErrors = (formProps) => {\n    for (const [key, prop] of Object.entries(formProps)) {\n        const errorField = document.getElementById(`${key}-error`);\n        if (errorField) errorField.innerText = \"\";\n    }\n\n    document.getElementById(\"form-success\").innerText = \"\";\n};\n\n\nexport const submitContactForm = (event) => {\n    event.preventDefault();\n    const formData = new FormData(document.getElementById(\"contact-form\"));\n    const formProps = Object.fromEntries(formData);\n\n    const { success, errors } = validate(formProps);\n\n    clearErrors(formProps);\n\n    if (errors) {\n        errors.forEach((error) => {\n            const errorField = document.getElementById(`${error.field}-error`);\n            errorField.innerText = error.message;\n        });\n    }\n\n    if (success) {\n        const submitButton = document.getElementById(\n            \"contact-form-submit-button\"\n        );\n\n        submitButton.disabled = true;\n\n        const { success } = sendMail();\n\n        if (success) {\n            submitButton.classList.add(\"success\");\n            submitButton.innerText = \"Sent!\";\n            document.getElementById(\"form-success\").innerText =\n                \"Your message has been sent. Thanks for contacting us!\";\n        }\n    } else {\n        document.getElementById(\"form-success\").innerText = \"\";\n    }\n};\n","const callback = (entries) => {\n    entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n            entry.target.classList.add(\"is-intersecting\");\n        } else {\n            entry.target.classList.remove(\"is-intersecting\");\n        }\n    });\n};\n\nconst observer = new IntersectionObserver(callback, {\n    root: document.querySelector(\"body\"),\n    threshold: 1.0,\n});\n\nconst observables = document.querySelectorAll(\"[data-scroll]\");\n\nexport const useIntersectionObserver = () => {\n    observables.forEach((observable) => observer.observe(observable));\n};\n","const pageLinks = document.querySelectorAll(\"[data-page-link]\");\nconst pages = document.querySelectorAll(\"[data-page]\");\n\nexport const usePrimitiveSPRouter = () => {\n    pageLinks.forEach((pageLink) => {\n        pageLink.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n\n            pageLinks.forEach((pageLink) =>\n                pageLink.classList.remove(\"active\")\n            );\n\n            pageLink.classList.add(\"active\");\n\n            pages.forEach((page) => page.classList.remove(\"active\"));\n\n            document\n                .getElementById(pageLink.dataset.target)\n                .classList.add(\"active\");\n        });\n    });\n};\n","import { submitContactForm } from \"./utils/submitContactForm\";\nimport { useIntersectionObserver } from \"./utils/useIntersectionObserver\";\nimport { usePrimitiveSPRouter } from \"./utils/usePrimitiveSPRouter\";\n\nif (module.hot) {\n    module.hot.accept();\n}\n\nuseIntersectionObserver()\nusePrimitiveSPRouter()\n\ndocument.getElementById(\"contact-form\").addEventListener(\"submit\", submitContactForm);\n"],"names":["$c0f4a693c4206cf9$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","root","document","querySelector","threshold","$c0f4a693c4206cf9$var$observables","querySelectorAll","$295aec03f9ef1b59$var$pageLinks","$295aec03f9ef1b59$var$pages","observable","observe","pageLink","addEventListener","event","preventDefault","pageLink1","page","getElementById","dataset","formData","FormData","formProps","Object","fromEntries","success","errors","name","length","push","field","message","phone","replace","match","email","$d4fe0f8c8fd24104$var$validate","key","prop","errorField","innerText","$d4fe0f8c8fd24104$var$clearErrors","error","submitButton","disabled","success1","sendMail"],"version":3,"file":"index.ce20131b.js.map"}